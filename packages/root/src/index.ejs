<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <meta http-equiv="X-UA-Compatible" content="ie=edge">
  <title>Root Config</title>

  <!--
    Remove this if you only support browsers that support async/await.
    This is needed by babel to share largeish helper code for compiling async/await in older
    browsers. More information at https://github.com/single-spa/create-single-spa/issues/112
  -->
  <script src="https://cdn.jsdelivr.net/npm/regenerator-runtime@0.13.7/runtime.min.js"></script>

  <!--
    This CSP allows any SSL-enabled host and for arbitrary eval(), but you should limit these directives further to increase your app's security.
    Learn more about CSP policies at https://content-security-policy.com/#directive
  -->
  <meta name="importmap-type" content="systemjs-importmap" />
  <!-- If you wish to turn off import-map-overrides for specific environments (prod), uncomment the line below -->
  <!-- More info at https://github.com/joeldenning/import-map-overrides/blob/master/docs/configuration.md#domain-list -->
  <!-- <meta name="import-map-overrides-domains" content="denylist:prod.example.com" /> -->

  <!-- Shared dependencies go into this import map. Your shared dependencies must be of one of the following formats:

    1. System.register (preferred when possible) - https://github.com/systemjs/systemjs/blob/master/docs/system-register.md
    2. UMD - https://github.com/umdjs/umd
    3. Global variable

    More information about shared dependencies can be found at https://single-spa.js.org/docs/recommended-setup#sharing-with-import-maps.
  -->
  <script type="systemjs-importmap">
    {
      "imports": {
        "single-spa": "https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js",
        "react": "https://cdn.jsdelivr.net/npm/react@16.13.1/umd/react.production.min.js",
        "react-dom": "https://cdn.jsdelivr.net/npm/react-dom@16.13.1/umd/react-dom.production.min.js"
      }
    }
  </script>
  <link rel="preload" href="https://cdn.jsdelivr.net/npm/single-spa@5.9.0/lib/system/single-spa.min.js" as="script">


  <!--
    If you need to support Angular applications, uncomment the script tag below to ensure only one instance of ZoneJS is loaded
    Learn more about why at https://single-spa.js.org/docs/ecosystem-angular/#zonejs
  -->
  <!-- <script src="https://cdn.jsdelivr.net/npm/zone.js@0.11.3/dist/zone.min.js"></script> -->

    <script type="systemjs-importmap">
      {
        "imports": {
          "@single-spa/welcome": "https://unpkg.com/single-spa-welcome/dist/single-spa-welcome.js",
          "@kampov/root-config": "//localhost:9000/kampov-root-config.js",
          "@kampov/header": "//localhost:9001/kampov-header.js",
          "@kampov/mfe1": "//localhost:9002/kampov-mfe1.js",
          "@kampov/mfe2": "//localhost:9003/kampov-mfe2.js"
        }
      }
    </script>
  <script src="https://cdn.jsdelivr.net/npm/import-map-overrides@2.2.0/dist/import-map-overrides.js"></script>
  <% if (isLocal) { %>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.js"></script>
  <% } else { %>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/system.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/systemjs@6.8.3/dist/extras/amd.min.js"></script>
  <% } %>

</head>
<body>
  <noscript>
    You need to enable JavaScript to run this app.
  </noscript>
  <% if (isLocal) { %>
    <script>
      System.import('@kampov/root-config');
    </script>
  <% } else { %>
    <script>
      fetch("//fwdays-mfe-showcase-server.vercel.app/bundles" + window.location.search).then(res => res.json()).then((importMap) => {
        var s = document.createElement('script');
        s.type = 'systemjs-importmap';

        try {
          s.appendChild(document.createTextNode(JSON.stringify(importMap)));
          document.body.appendChild(s);
        } catch (e) {
          s.text = JSON.stringify(importMap);
          document.body.appendChild(s);
        }

        System.import('@kampov/root-config');
      })
    </script>
  <% } %>
  <style>
    .container {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: 12px;
    }
  </style>
  <import-map-overrides-full show-when-local-storage="devtools" dev-libs></import-map-overrides-full>
  <script>
    async function debugPanel(){
      const isDebug = new URLSearchParams(window.location.search).has('debug');

      if (!isDebug) {
        return
      }

      const isDev = window.location.hostname === "localhost";
      const overridesPanel =isDev
              ? "//localhost:9004/feature-toggles"
              : "//fwdays-mfe-showcase-server.vercel.app/feature-toggles"

      const res = await fetch(overridesPanel)
      const overrides = await res.json()

      const debugDiv = document.createElement('div');
      debugDiv.style.position = 'fixed';
      debugDiv.style.top = '0';
      debugDiv.style.right = '0';
      debugDiv.style.backgroundColor = 'white';
      debugDiv.style.padding = '12px';
      debugDiv.style.border = '1px solid black';
      Object.keys(overrides.toggles).forEach(key => {
        const div = document.createElement('div');
        const isEnabled = !!overrides[key];
        const a = document.createElement('a');
        a.href = ''
        a.innerText = isEnabled ? 'Disable' : 'Enable'
        a.onclick = (e) => {
          e.preventDefault();
          const searchParams = new URLSearchParams(window.location.search)

          const overrides = JSON.parse(searchParams.get('overrides') || '{}');

          searchParams.set('overrides', JSON.stringify({ ...overrides, toggles: { ...(overrides.toggles ||  {}) ,[key]: !isEnabled }}))
          const url = window.location.origin + window.location.pathname + '?' + searchParams.toString();
          window.location.replace(url)
        }
        const p = document.createElement('p');
        const span = document.createElement('span');
        span.innerText = `${key}: `;
        p.appendChild(span)
        p.appendChild(a)
        div.append(p)
        debugDiv.appendChild(div)

        document.body.append(debugDiv)
      })
    }
    debugPanel()
  </script>
</body>
</html>
